/**
 * Copyright 2013-2016 Axel Huebl, Heiko Burau, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#ifndef FIELDMANIPULATOR_KERNEL
#define    FIELDMANIPULATOR_KERNEL

#include "pmacc_types.hpp"
#include "simulation_defines.hpp"
#include "simulation_classTypes.hpp"
#include "nvidia/atomic.hpp"

#include "mappings/elements/Vectorize.hpp"

namespace picongpu
{

using namespace PMacc;

template<typename T_ElemSize, int pos, class BoxedMemory, class Mapping, typename T_Acc>
DINLINE void absorb(const T_Acc& acc, BoxedMemory field, uint32_t thickness, float_X absorber_strength, Mapping mapper, const DataSpace<simDim> &direction)
{
    typedef typename MappingDesc::SuperCellSize SuperCellSize;
    const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx)));


    const DataSpace<simDim > threadOffset( DataSpace<simDim>(threadIdx) * T_ElemSize::toRT() );

    DataSpace<simDim> originCell(superCellIdx * SuperCellSize::toRT() + threadOffset );
    //cells in simulation
    const DataSpace<simDim> gCells = mapper.getGridSuperCells() * SuperCellSize::toRT();


    float_X factor = float_X(0.0);


    namespace mapElem = mappings::elements;

    mapElem::vectorize<simDim>(
        [&]( const DataSpace<simDim>& idx )
        {
            for(int i = 0; (i + threadOffset[pos] + idx[pos]) < thickness; i += MappingDesc::SuperCellSize::toRT()[pos])
            {

                DataSpace<simDim> cell(originCell + idx);
                cell[pos] += ( i * direction[ pos ] * -1 );

                if (direction[pos] != 0)
                {
                    if (direction[pos] < 0)
                    {
                        factor = (float_X) (MappingDesc::SuperCellSize::toRT()[pos] + thickness - cell[pos] - 1);
                    }
                    else
                    {
                        factor = (float_X) ((MappingDesc::SuperCellSize::toRT()[pos] + cell[pos]) - gCells[pos] + thickness);
                    }
                }
                if (factor <= float_X(0.0))
                {
                    return;
                }

                float_X a = math::exp(float_X(-absorber_strength) * (factor));

                float3_X tmp = field(cell);
                tmp.x() *= a;
                tmp.y() *= a;
                tmp.z() *= a;
                field(cell) *= a;
            }
        },
        T_ElemSize::toRT(),
        mapElem::Contiguous()
    );

}

template< typename T_ElemSize = typename PMacc::math::CT::make_Int<simDim,1>::type::vector_type >
struct kernelAbsorbBorder
{
template<class BoxedMemory, class Mapping, typename T_Acc>
DINLINE void operator()(const T_Acc& acc, BoxedMemory field, uint32_t thickness, float_X absorber_strength, Mapping mapper) const
{

    const DataSpace<simDim> direction = Mask::getRelativeDirections<simDim > (mapper.getExchangeType());

    //this is a workaround that we get a kernelwithout lmem
    if (direction.x() != 0)
        absorb < T_ElemSize, 0 > (acc, field, thickness, absorber_strength, mapper, direction);
    else if (direction.y() != 0)
        absorb < T_ElemSize, 1 > (acc, field, thickness, absorber_strength, mapper, direction);
#if (SDIMDIM==DIM3)
    else if (direction.z() != 0)
        absorb < T_ElemSize, 2 > (acc, field, thickness, absorber_strength, mapper, direction);
#endif
}
};
} //namespace
#endif    /* FIELDMANIPULATOR_KERNEL */

