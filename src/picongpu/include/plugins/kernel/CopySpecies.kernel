/**
 * Copyright 2013-2016 Rene Widera, Felix Schmitt
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once


#include "pmacc_types.hpp"
#include "simulation_types.hpp"
#include "dimensions/DataSpaceOperations.hpp"
#include "nvidia/atomic.hpp"


namespace picongpu
{

using namespace PMacc;

/** Copy Particles to a Single Frame
 *
 * - copy particle data that was stored in a linked list of frames for each
 *   super-cell on the GPU to a single frame on the CPU RAM
 * - the deep on-GPU hierarchy must be copied to the CPU beforehand
 * - remove species attributes `multiMask` and `localCellIdx`
 * - add new attribute `globalCellIdx` (particle offset to begin of global
 *   moving window)
 */
struct ConcatListOfFrames
{
    DataSpace<simDim> m_gridDim;

    ConcatListOfFrames(const DataSpace<simDim>& gridDim) :
    m_gridDim(gridDim)
    {

    }

    /** concatenate list of frames to single frame
     *
     * @param counter[in,out] scalar offset in `destFrame`
     * @param destFrame single frame were all particles are copied in
     * @param srcBox particle box were particles are read from
     * @param filter filter to select particles
     * @param particleOffset can be negative for the first GPU: localDomain.offset - globalWindow.offset
     * @param mapper mapper which describe the area were particles are copied from
     */
    template<class T_DestFrame, class T_SrcBox, class T_Filter, class T_Space, class T_Mapping>
    void operator()(int& counter, T_DestFrame destFrame, T_SrcBox srcBox, T_Filter filterWindowDomain, T_Space particleOffset, T_Mapping mapper)
    {
        #pragma omp parallel for
        for (int linearBlockIdx = 0;
             linearBlockIdx < m_gridDim.productOfComponents();
             ++linearBlockIdx
             )
        {
            // local copy for each omp thread
            T_Filter filter = filterWindowDomain;
            DataSpace<simDim> blockIdx(DataSpaceOperations<simDim>::map(m_gridDim, linearBlockIdx));

            using namespace PMacc::particles::operations;

            typedef T_DestFrame DestFrameType;
            typedef typename T_SrcBox::FrameType SrcFrameType;
            typedef typename T_SrcBox::FramePtr SrcFramePtr;

            typedef T_Mapping Mapping;
            typedef typename Mapping::SuperCellSize Block;


            SrcFramePtr srcFramePtr;
            int localCounter;
            int globalOffset;
            const int particlePerFrame = PMacc::math::CT::volume<SuperCellSize>::type::value;
            int storageOffset[particlePerFrame];


            const DataSpace<Mapping::Dim> block = mapper.getSuperCellIndex(blockIdx);
            const DataSpace<Mapping::Dim> superCellPosition((block - mapper.getGuardingSuperCells()) * mapper.getSuperCellSize());
            filter.setSuperCellPosition(superCellPosition);

            srcFramePtr = srcBox.getFirstFrame(block);

            while (srcFramePtr.isValid()) //move over all Frames
            {
                localCounter = 0;
                /* clear storageOffset array*/
                for (int threadIdx = 0; threadIdx < particlePerFrame; ++threadIdx)
                {
                    storageOffset[threadIdx] = -1;
                    PMACC_AUTO(parSrc, (srcFramePtr[threadIdx]));
                    /*count particle in frame*/
                    if (parSrc[multiMask_] == 1 && filter(*srcFramePtr, threadIdx))
                        storageOffset[threadIdx] = localCounter++;
                }

                /* atomic update with openmp*/
                #pragma omp critical
                {
                    globalOffset = counter;
                    counter += localCounter;
                }

                for (int threadIdx = 0; threadIdx < particlePerFrame; ++threadIdx)
                {
                    if (storageOffset[threadIdx] != -1)
                    {
                        PMACC_AUTO(parSrc, (srcFramePtr[threadIdx]));
                        PMACC_AUTO(parDest, destFrame[globalOffset + storageOffset[threadIdx]]);
                        PMACC_AUTO(parDestNoGlobalIdx, deselect<globalCellIdx<> >(parDest));
                        assign(parDestNoGlobalIdx, parSrc);
                        /*calculate global cell index*/
                        DataSpace<Mapping::Dim> localCell(DataSpaceOperations<Mapping::Dim>::template map<Block>(parSrc[localCellIdx_]));
                        parDest[globalCellIdx_] = particleOffset + superCellPosition + localCell;
                    }
                }
                /*get next frame in supercell*/
                srcFramePtr = srcBox.getNextFrame(srcFramePtr);

            }
        }
    }

};


struct copySpecies
{
/** copy particle of a species to a host frame
 *
 * @tparam T_DestFrame type of destination frame
 * @tparam T_SrcBox type of the data box of source memory
 * @tparam T_Filter type of filer with particle selection rules
 * @tparam T_Space type of coordinate description
 * @tparam T_Mapping type of the mapper to map cuda idx to supercells
 *
 * @param counter pointer to a device counter to reserve memory in destFrame
 * @param destFrame frame were we store particles in host memory (no Databox<...>)
 * @param srcBox ParticlesBox with frames
 * @param filer filer with rules to select particles
 * @param particleOffset can be negative for the first GPU: localDomain.offset - globalWindow.offset
 * @param mapper apper to map cuda idx to supercells
 */
template<class T_DestFrame, class T_SrcBox, class T_Filter, class T_Space, class T_Mapping, typename T_Acc>
DINLINE void operator()(const T_Acc& acc, int* counter, T_DestFrame destFrame, T_SrcBox srcBox, T_Filter filter, T_Space particleOffset, T_Mapping mapper) const
{
    using namespace PMacc::particles::operations;

    typedef T_DestFrame DestFrameType;
    typedef typename T_SrcBox::FrameType SrcFrameType;
    typedef typename T_SrcBox::FramePtr SrcFramePtr;

    typedef T_Mapping Mapping;
    typedef typename Mapping::SuperCellSize Block;

    sharedMem(srcFramePtr, typename PMacc::traits::GetEmptyDefaultConstructibleType<SrcFramePtr>::type);
    sharedMem(localCounter,int);
    sharedMem(globalOffset,int);

    int storageOffset;


    const DataSpace<Mapping::Dim> block = mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx));
    const DataSpace<Mapping::Dim> superCellPosition((block - mapper.getGuardingSuperCells()) * mapper.getSuperCellSize());
    filter.setSuperCellPosition(superCellPosition);
    if (threadIdx.x == 0)
    {
        localCounter = 0;
        srcFramePtr = srcBox.getFirstFrame(block);
    }
    __syncthreads();
    while (srcFramePtr.isValid()) //move over all Frames
    {
        PMACC_AUTO(parSrc, (srcFramePtr[threadIdx.x]));
        storageOffset = -1;
        /*count particle in frame*/
        if (parSrc[multiMask_] == 1 && filter(*srcFramePtr, threadIdx.x))
            storageOffset = nvidia::atomicAllInc(acc, &localCounter);
        __syncthreads();
        if (threadIdx.x == 0)
        {
            /*reserve host memory for particle*/
            globalOffset = atomicAdd(counter, localCounter);
        }
        __syncthreads();
        if (storageOffset != -1)
        {
            PMACC_AUTO(parDest, destFrame[globalOffset + storageOffset]);
            PMACC_AUTO(parDestNoGlobalIdx, deselect<globalCellIdx<> >(parDest));
            assign(parDestNoGlobalIdx, parSrc);
            /*calculate global cell index*/
            DataSpace<Mapping::Dim> localCell(DataSpaceOperations<Mapping::Dim>::template map<Block>(parSrc[localCellIdx_]));
            parDest[globalCellIdx_] = particleOffset + superCellPosition + localCell;
        }
        __syncthreads();
        if (threadIdx.x == 0)
        {
            /*get next frame in supercell*/
            srcFramePtr = srcBox.getNextFrame(srcFramePtr);
            localCounter = 0;
        }
        __syncthreads();
    }
}
};

} //namespace picongpu

