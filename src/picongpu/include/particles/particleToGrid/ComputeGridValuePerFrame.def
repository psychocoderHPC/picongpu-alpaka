/**
 * Copyright 2013-2016 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "simulation_defines.hpp"
#include "fields/Fields.def"
#include "particles/traits/GetShape.hpp"
#include "particles/particleToGrid/derivedAttributes/DerivedAttributes.def"

namespace picongpu
{
namespace particleToGrid
{

template<class T_ParticleShape, class T_DerivedAttribute>
class ComputeGridValuePerFrame
{
public:

    typedef typename T_ParticleShape::ChargeAssignment AssignmentFunction;
    BOOST_STATIC_CONSTEXPR int supp = AssignmentFunction::support;

    BOOST_STATIC_CONSTEXPR int lowerMargin = supp / 2;
    BOOST_STATIC_CONSTEXPR int upperMargin = (supp + 1) / 2;
    typedef typename PMacc::math::CT::make_Int<simDim, lowerMargin>::type LowerMargin;
    typedef typename PMacc::math::CT::make_Int<simDim, upperMargin>::type UpperMargin;

    HDINLINE ComputeGridValuePerFrame()
    {
    }

    /** return unit for this solver
     *
     * @return solver unit
     */
    HDINLINE float1_64 getUnit() const;

    /** return name of the this solver
     * @return name of solver
     */
    HINLINE std::string getName() const;

    template<class FrameType, class TVecSuperCell, class BoxTmp, typename T_Acc >
    DINLINE void operator()(const T_Acc& acc, FrameType& frame, const int localIdx,
                            const TVecSuperCell superCell,
                            BoxTmp& tmpBox);
};

/** Predefined Calculations for \see fieldOutput.param
 */

/* ChargeDensity */
template<typename T_Species>
struct CreateDensityOperation
{
    typedef typename GetShape<T_Species>::type shapeType;
    typedef ComputeGridValuePerFrame<
        shapeType,
        particleToGrid::derivedAttributes::ChargeDensity
    > ParticleDensity;

    typedef FieldTmpOperation< ParticleDensity, T_Species > type;
};

/* ParticleCounter */
template<typename T_Species>
struct CreateCounterOperation
{
    typedef ComputeGridValuePerFrame<
        particles::shapes::Counter,
        particleToGrid::derivedAttributes::Counter
    > ParticleCounter;

    typedef FieldTmpOperation< ParticleCounter, T_Species > type;
};

/* EnergyDensity */
template<typename T_Species>
struct CreateEnergyDensityOperation
{
    typedef typename GetShape<T_Species>::type shapeType;
    typedef ComputeGridValuePerFrame<
        shapeType,
        particleToGrid::derivedAttributes::EnergyDensity
    > ParticleEnergyDensity;

    typedef FieldTmpOperation< ParticleEnergyDensity, T_Species > type;
};

/* Energy */
template<typename T_Species>
struct CreateEnergyOperation
{
    typedef typename GetShape<T_Species>::type shapeType;
    typedef ComputeGridValuePerFrame<
        shapeType,
        particleToGrid::derivedAttributes::Energy
    > ParticleEnergy;

    typedef FieldTmpOperation< ParticleEnergy, T_Species > type;
};

#if(ENABLE_RADIATION == 1)
template<typename T_Species>
struct CreateLarmorPowerOperation
{
    typedef typename GetShape<T_Species>::type shapeType;
    typedef ComputeGridValuePerFrame<
        shapeType,
        particleToGrid::derivedAttributes::LarmorPower
    > ParticleLarmorPower;

    typedef FieldTmpOperation< ParticleLarmorPower, T_Species > type;
};
#endif


} // namespace particleToGrid
} // namespace picongpu
